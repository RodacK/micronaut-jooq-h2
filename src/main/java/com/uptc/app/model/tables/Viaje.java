/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.util.Arrays;
import java.util.List;

import model.Keys;
import model.Transmi;
import model.tables.records.ViajeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Viaje extends TableImpl<ViajeRecord> {

    private static final long serialVersionUID = 1837394564;

    /**
     * The reference instance of <code>TRANSMI.VIAJE</code>
     */
    public static final Viaje VIAJE = new Viaje();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViajeRecord> getRecordType() {
        return ViajeRecord.class;
    }

    /**
     * The column <code>TRANSMI.VIAJE.ID</code>.
     */
    public final TableField<ViajeRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRANSMI.VIAJE.DISTANCIA</code>.
     */
    public final TableField<ViajeRecord, Long> DISTANCIA = createField(DSL.name("DISTANCIA"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRANSMI.VIAJE.TARJETA_ID</code>.
     */
    public final TableField<ViajeRecord, Integer> TARJETA_ID = createField(DSL.name("TARJETA_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRANSMI.VIAJE.VEHICULO_ID</code>.
     */
    public final TableField<ViajeRecord, Integer> VEHICULO_ID = createField(DSL.name("VEHICULO_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>TRANSMI.VIAJE</code> table reference
     */
    public Viaje() {
        this(DSL.name("VIAJE"), null);
    }

    /**
     * Create an aliased <code>TRANSMI.VIAJE</code> table reference
     */
    public Viaje(String alias) {
        this(DSL.name(alias), VIAJE);
    }

    /**
     * Create an aliased <code>TRANSMI.VIAJE</code> table reference
     */
    public Viaje(Name alias) {
        this(alias, VIAJE);
    }

    private Viaje(Name alias, Table<ViajeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Viaje(Name alias, Table<ViajeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Viaje(Table<O> child, ForeignKey<O, ViajeRecord> key) {
        super(child, key, VIAJE);
    }

    @Override
    public Schema getSchema() {
        return Transmi.TRANSMI;
    }

    @Override
    public UniqueKey<ViajeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public List<UniqueKey<ViajeRecord>> getKeys() {
        return Arrays.<UniqueKey<ViajeRecord>>asList(Keys.CONSTRAINT_4);
    }

    @Override
    public List<ForeignKey<ViajeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ViajeRecord, ?>>asList(Keys.FK_VIAJE_TARJETA1, Keys.FK_VIAJE_VEHICULO1);
    }

    public Tarjeta tarjeta() {
        return new Tarjeta(this, Keys.FK_VIAJE_TARJETA1);
    }

    public Vehiculo vehiculo() {
        return new Vehiculo(this, Keys.FK_VIAJE_VEHICULO1);
    }

    @Override
    public Viaje as(String alias) {
        return new Viaje(DSL.name(alias), this);
    }

    @Override
    public Viaje as(Name alias) {
        return new Viaje(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Viaje rename(String name) {
        return new Viaje(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Viaje rename(Name name) {
        return new Viaje(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
