/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.util.Arrays;
import java.util.List;

import model.Keys;
import model.Transmi;
import model.tables.records.EstacionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Estacion extends TableImpl<EstacionRecord> {

    private static final long serialVersionUID = -1334021733;

    /**
     * The reference instance of <code>TRANSMI.ESTACION</code>
     */
    public static final Estacion ESTACION = new Estacion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EstacionRecord> getRecordType() {
        return EstacionRecord.class;
    }

    /**
     * The column <code>TRANSMI.ESTACION.ID</code>.
     */
    public final TableField<EstacionRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRANSMI.ESTACION.NOMBRE</code>.
     */
    public final TableField<EstacionRecord, String> NOMBRE = createField(DSL.name("NOMBRE"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>TRANSMI.ESTACION.TIENE_TAQUILLA</code>.
     */
    public final TableField<EstacionRecord, String> TIENE_TAQUILLA = createField(DSL.name("TIENE_TAQUILLA"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>TRANSMI.ESTACION.UBICACION</code>.
     */
    public final TableField<EstacionRecord, String> UBICACION = createField(DSL.name("UBICACION"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>TRANSMI.ESTACION.SECTOR</code>.
     */
    public final TableField<EstacionRecord, String> SECTOR = createField(DSL.name("SECTOR"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>TRANSMI.ESTACION.VIAJE_ID</code>.
     */
    public final TableField<EstacionRecord, Integer> VIAJE_ID = createField(DSL.name("VIAJE_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRANSMI.ESTACION.VIAJE_DISTANCIA</code>.
     */
    public final TableField<EstacionRecord, Long> VIAJE_DISTANCIA = createField(DSL.name("VIAJE_DISTANCIA"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRANSMI.ESTACION.RUTA_ID</code>.
     */
    public final TableField<EstacionRecord, Integer> RUTA_ID = createField(DSL.name("RUTA_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>TRANSMI.ESTACION</code> table reference
     */
    public Estacion() {
        this(DSL.name("ESTACION"), null);
    }

    /**
     * Create an aliased <code>TRANSMI.ESTACION</code> table reference
     */
    public Estacion(String alias) {
        this(DSL.name(alias), ESTACION);
    }

    /**
     * Create an aliased <code>TRANSMI.ESTACION</code> table reference
     */
    public Estacion(Name alias) {
        this(alias, ESTACION);
    }

    private Estacion(Name alias, Table<EstacionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Estacion(Name alias, Table<EstacionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Estacion(Table<O> child, ForeignKey<O, EstacionRecord> key) {
        super(child, key, ESTACION);
    }

    @Override
    public Schema getSchema() {
        return Transmi.TRANSMI;
    }

    @Override
    public UniqueKey<EstacionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public List<UniqueKey<EstacionRecord>> getKeys() {
        return Arrays.<UniqueKey<EstacionRecord>>asList(Keys.CONSTRAINT_B);
    }

    @Override
    public List<ForeignKey<EstacionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EstacionRecord, ?>>asList(Keys.FK_ESTACION_VIAJE1, Keys.FK_ESTACION_RUTA1);
    }

    public Viaje viaje() {
        return new Viaje(this, Keys.FK_ESTACION_VIAJE1);
    }

    public Ruta ruta() {
        return new Ruta(this, Keys.FK_ESTACION_RUTA1);
    }

    @Override
    public Estacion as(String alias) {
        return new Estacion(DSL.name(alias), this);
    }

    @Override
    public Estacion as(Name alias) {
        return new Estacion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Estacion rename(String name) {
        return new Estacion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Estacion rename(Name name) {
        return new Estacion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, Integer, Long, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
