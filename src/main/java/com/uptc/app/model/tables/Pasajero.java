/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.util.Arrays;
import java.util.List;

import model.Keys;
import model.Transmi;
import model.tables.records.PasajeroRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pasajero extends TableImpl<PasajeroRecord> {

    private static final long serialVersionUID = -993129182;

    /**
     * The reference instance of <code>TRANSMI.PASAJERO</code>
     */
    public static final Pasajero PASAJERO = new Pasajero();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PasajeroRecord> getRecordType() {
        return PasajeroRecord.class;
    }

    /**
     * The column <code>TRANSMI.PASAJERO.ID</code>.
     */
    public final TableField<PasajeroRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRANSMI.PASAJERO.NOMBRES</code>.
     */
    public final TableField<PasajeroRecord, String> NOMBRES = createField(DSL.name("NOMBRES"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>TRANSMI.PASAJERO.EDAD</code>.
     */
    public final TableField<PasajeroRecord, String> EDAD = createField(DSL.name("EDAD"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>TRANSMI.PASAJERO.GENERO</code>.
     */
    public final TableField<PasajeroRecord, String> GENERO = createField(DSL.name("GENERO"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * Create a <code>TRANSMI.PASAJERO</code> table reference
     */
    public Pasajero() {
        this(DSL.name("PASAJERO"), null);
    }

    /**
     * Create an aliased <code>TRANSMI.PASAJERO</code> table reference
     */
    public Pasajero(String alias) {
        this(DSL.name(alias), PASAJERO);
    }

    /**
     * Create an aliased <code>TRANSMI.PASAJERO</code> table reference
     */
    public Pasajero(Name alias) {
        this(alias, PASAJERO);
    }

    private Pasajero(Name alias, Table<PasajeroRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pasajero(Name alias, Table<PasajeroRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Pasajero(Table<O> child, ForeignKey<O, PasajeroRecord> key) {
        super(child, key, PASAJERO);
    }

    @Override
    public Schema getSchema() {
        return Transmi.TRANSMI;
    }

    @Override
    public UniqueKey<PasajeroRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<PasajeroRecord>> getKeys() {
        return Arrays.<UniqueKey<PasajeroRecord>>asList(Keys.CONSTRAINT_7);
    }

    @Override
    public Pasajero as(String alias) {
        return new Pasajero(DSL.name(alias), this);
    }

    @Override
    public Pasajero as(Name alias) {
        return new Pasajero(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pasajero rename(String name) {
        return new Pasajero(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pasajero rename(Name name) {
        return new Pasajero(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
